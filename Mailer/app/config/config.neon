parameters:
    sso_addr: @environmentConfig::get('SSO_ADDR')
    sso_error_url: @environmentConfig::get('SSO_ERROR_URL')
    redis:
        host: @environmentConfig::get('REDIS_HOST')
        port: @environmentConfig::get('REDIS_PORT')
        db: @environmentConfig::get('REDIS_DB')
    kafka:
        broker: @environmentConfig::get('KAFKA_BROKER')
    hermes:
        restart_file_path: @environmentConfig::get('HERMES_RESTART_FILE_PATH')
    remp:
        beam:
            web_addr: @environmentConfig::get('REMP_BEAM_ADDR')
            tracker_addr: @environmentConfig::get('REMP_BEAM_TRACKER_ADDR')
            tracker_property_token: @environmentConfig::get('REMP_BEAM_TRACKER_PROPERTY_TOKEN')
            segments_addr: @environmentConfig::get('REMP_BEAM_SEGMENTS_ADDR')
        campaign:
            web_addr: @environmentConfig::get('REMP_CAMPAIGN_ADDR')
    errbit:
        send_errors: false

extensions:
    local_configs: Remp\MailerModule\Config\ConfigExtension

application:
    errorPresenter: Mailer:Error
    mapping:
        Api: Tomaj\NetteApi\Presenters\*Presenter
        *: Remp\*Module\Presenters\*Presenter

session:
    expiration: 14 days

database:
    default:
        dsn: @environmentConfig::getDsn()
        user: @environmentConfig::get('DB_USER')
        password: @environmentConfig::get('DB_PASS')
        options:
            lazy: yes

services:
    router: Remp\RouterFactory::createRouter
    environmentConfig:
        class: Remp\MailerModule\EnvironmentConfig
        setup:
            - linkService(beam, %remp.beam.web_addr%, album)
            - linkService(campaign, %remp.campaign.web_addr%, trending-up)
            - linkService(mailer, /, email)

    # Latte filters
    filterLoader:
        class: Remp\MailerModule\Filters\FilterLoader
        setup:
            - register('yesNo', [Remp\MailerModule\Filters\YesNoFilter(), process])

    nette.latteFactory:
        setup:
            - addFilter(null, [@filterLoader, 'load'])

    console:
        class: Remp\MailerModule\Console\Application
        setup:
            - announce(Remp\MailerModule\Commands\HelloWorldCommand)
            - announce(Remp\MailerModule\Commands\ProcessJobCommand)
            - announce(Remp\MailerModule\Commands\MailWorkerCommand)
            - announce(Remp\MailerModule\Commands\SyncUserSubscriptionsCommand)
            - announce(Remp\MailerModule\Commands\SubscribeWorkerCommand)
            - announce(Remp\MailerModule\Commands\EmailChangedWorkerCommand)
            - announce(Remp\MailerModule\Commands\DatabaseSeedCommand)
            - announce(Remp\MailerModule\Commands\DemoSeedCommand)
            - announce(Remp\MailerModule\Commands\HermesWorkerCommand)
            - announce(Remp\MailerModule\Commands\ProcessJobStatsCommand)
            - setCatchExceptions(true)

    hermesLogger:
        class: Monolog\Logger('hermes-logger')
        setup:
            - pushHandler(Monolog\Handler\StreamHandler("%appDir%/../log/hermes-log.txt"))
            - pushHandler(Monolog\Handler\ErrorLogHandler())
    hermesRestart: Tomaj\Hermes\Restart\SharedFileRestart(%hermes.restart_file_path%)
    hermesDispatcher:
        class: Tomaj\Hermes\Dispatcher(Remp\MailerModule\Hermes\RedisDriver(), @hermesLogger, @hermesRestart)
    hermesEmitter:
        class: Tomaj\Hermes\Emitter(Remp\MailerModule\Hermes\RedisDriver(), @hermesLogger)
    - Remp\MailerModule\Hermes\HermesTasksQueue(%redis.host%, %redis.port%, %redis.db%)
    - Remp\MailerModule\Repository\HermesTasksRepository
    hermesWorker:
        class: Remp\MailerModule\Commands\HermesWorkerCommand
        setup:
            - add('list-created', Remp\MailerModule\Hermes\ListCreatedHandler())
            - add('mail-sent', Remp\MailerModule\Hermes\MailSentHandler())

    segmentAgreggator:
        class: Remp\MailerModule\Segment\Aggregator
        setup:
            - register(Remp\MailerModule\Segment\Remp(%remp.beam.segments_addr%))

    - Remp\MailerModule\Tracker\Remp(%remp.beam.tracker_addr%, %remp.beam.tracker_property_token%)

    mailFactory:
        class: Remp\MailerModule\Sender\MailerFactory
        setup:
            # Register all Mailers (Nette\Mail\IMailer)
            - addMailer(Remp\MailerModule\Mailer\SmtpMailer())
            - addMailer(Remp\MailerModule\Mailer\MailgunMailer())

#    # Internal CRM system. For more details contact Tomas Bella.
#    authenticator:
#        class: Remp\MailerModule\Auth\Authenticator
#    authStorage:
#        class: Remp\MailerModule\Auth\RemoteUser(%sso_host%)

    # SSO authentication
    - Remp\NetteSso\Security\Client(%sso_addr%)
    authenticator:
        class: Remp\NetteSso\Security\Authenticator(%sso_error_url%)
    security.userStorage:
        class: Remp\NetteSso\Security\UserStorage

    - Remp\MailerModule\Config\Config
    - Remp\MailerModule\Sender
    - Remp\MailerModule\Broker\ConsumerFactory(%kafka.broker%)
    - Remp\MailerModule\Job\BatchEmailGenerator
    - Remp\MailerModule\Job\MailCache(%redis.host%, %redis.port%, %redis.db%)
    - Remp\MailerModule\Auth\AutoLogin

    # API
    - Tomaj\NetteApi\Link\ApiLink
    - Tomaj\NetteApi\Misc\IpDetector
    apiDecider:
        class: Tomaj\NetteApi\ApiDecider
        setup:
            - addApiHandler(\Tomaj\NetteApi\EndpointIdentifier('POST', 1, 'users', 'subscribe'), \Remp\MailerModule\Api\v1\Handlers\Users\SubscribeHandler(), \Tomaj\NetteApi\Authorization\NoAuthorization())
            - addApiHandler(\Tomaj\NetteApi\EndpointIdentifier('POST', 1, 'users', 'un-subscribe'), \Remp\MailerModule\Api\v1\Handlers\Users\UnSubscribeHandler(), \Tomaj\NetteApi\Authorization\NoAuthorization())
            - addApiHandler(\Tomaj\NetteApi\EndpointIdentifier('POST', 1, 'users', 'check-token'), \Remp\MailerModule\Api\v1\Handlers\Users\CheckTokenHandler(), \Tomaj\NetteApi\Authorization\NoAuthorization())
            - addApiHandler(\Tomaj\NetteApi\EndpointIdentifier('POST', 1, 'mailers', 'mailgun'), \Remp\MailerModule\Api\v1\Handlers\Mailers\MailgunEventsHandler(), \Tomaj\NetteApi\Authorization\NoAuthorization())

    # Repositories
    - Remp\MailerModule\Repository\AuditLogRepository
    - Remp\MailerModule\Repository\ConfigsRepository
    - Remp\MailerModule\Repository\UsersRepository
    - Remp\MailerModule\Repository\UserSubscriptionsRepository
    - Remp\MailerModule\Repository\LogsRepository('2000-01-01 00:00:00')
    - Remp\MailerModule\Repository\LogEventsRepository
    - Remp\MailerModule\Repository\LayoutsRepository
    - Remp\MailerModule\Repository\ListsRepository
    - Remp\MailerModule\Repository\ListCategoriesRepository
    - Remp\MailerModule\Repository\ListVariantsRepository
    - Remp\MailerModule\Repository\TemplatesRepository
    - Remp\MailerModule\Repository\JobsRepository
    - Remp\MailerModule\Repository\JobQueueRepository
    - Remp\MailerModule\Repository\SegmentsRepository
    - Remp\MailerModule\Repository\BatchesRepository
    - Remp\MailerModule\Repository\BatchTemplatesRepository
    - Remp\MailerModule\Repository\AutoLoginTokensRepository

    # Factories
    - Remp\MailerModule\Components\IDataTableFactory
    - Remp\MailerModule\Components\ITemplateStatsFactory

    # Forms
    - Remp\MailerModule\Forms\SignInFormFactory
    - Remp\MailerModule\Forms\ConfigFormFactory
    - Remp\MailerModule\Forms\ListFormFactory
    - Remp\MailerModule\Forms\LayoutFormFactory
    - Remp\MailerModule\Forms\TemplateFormFactory
    - Remp\MailerModule\Forms\TemplateTestFormFactory
    - Remp\MailerModule\Forms\JobFormFactory
    - Remp\MailerModule\Forms\NewBatchFormFactory
    - Remp\MailerModule\Forms\NewTemplateFormFactory

    # Commands
    - Remp\MailerModule\Commands\HelloWorldCommand
    - Remp\MailerModule\Commands\ProcessJobCommand
    - Remp\MailerModule\Commands\MailWorkerCommand
    - Remp\MailerModule\Commands\SyncUserSubscriptionsCommand
    - Remp\MailerModule\Commands\SubscribeWorkerCommand
    - Remp\MailerModule\Commands\EmailChangedWorkerCommand
    - Remp\MailerModule\Commands\DatabaseSeedCommand
    - Remp\MailerModule\Commands\DemoSeedCommand
    - Remp\MailerModule\Commands\ProcessJobStatsCommand
